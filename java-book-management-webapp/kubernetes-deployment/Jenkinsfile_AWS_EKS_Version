pipeline {
    agent any

    environment {
        AWS_REGION = 'eu-west-3'
        ECR_REPO = 'book-management-webapp'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        AWS_ACCOUNT_ID = '296369311089'  // your AWS account ID
        K8S_NAMESPACE = 'default'        // Kubernetes namespace to deploy to
        K8S_DEPLOYMENT_NAME = 'book-management-webapp'  // your k8s deployment name
        WORKDIR = 'java-book-management-webapp'
        KUBECONFIG = "${env.WORKSPACE}/kubeconfig"  // local kubeconfig path
        EKS_CLUSTER_NAME = 'book-management-webapp'  // your EKS cluster name
    }

    stages {

        stage('Login to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) { 
                    bat """
                        aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                        aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                        aws configure set region %AWS_REGION%
                        aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.%AWS_REGION%.amazonaws.com
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}", "${WORKDIR}")
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    dockerImage.push()
                }
            }
        }

        stage('Configure kubectl for EKS') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    bat """
                        aws configure set aws_access_key_id %AWS_ACCESS_KEY_ID%
                        aws configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY%
                        aws configure set region %AWS_REGION%
                        aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig %KUBECONFIG%
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                // Update the image tag in your Kubernetes deployment manifest or patch the deployment
                // Here we do a kubectl set image to update the deployment image dynamically
                
                bat """
                    kubectl --kubeconfig=%KUBECONFIG% -n ${K8S_NAMESPACE} apply -f kubernetes-deployment/deployment.yaml
                """

                // Optionally, rollout status to wait for the deployment to finish
                bat """
                    kubectl --kubeconfig=%KUBECONFIG% -n ${K8S_NAMESPACE} rollout status deployment/${K8S_DEPLOYMENT_NAME}
                """
            }
        }

    }
}
